if(TARGET TBB::tbb)
  return()
endif()
include(FetchContent)
set(TBB_VERSION v2022.2.0 CACHE STRING "oneTBB version")
set(TBB_TEST OFF CACHE BOOL "" FORCE)
set(TBB_STRICT OFF CACHE BOOL "" FORCE)
FetchContent_Declare(oneTBB URL https://github.com/uxlfoundation/oneTBB/archive/refs/tags/${TBB_VERSION}.tar.gz DOWNLOAD_EXTRACT_TIMESTAMP OFF)
FetchContent_MakeAvailable(oneTBB)
if(NOT TARGET TBB::tbb AND TARGET tbb)
  add_library(TBB::tbb ALIAS tbb)
endif()
if(DEFINED oneTBB_BINARY_DIR)
  if(NOT DEFINED TBB_DIR OR NOT TBB_DIR)
    set(TBB_DIR "${oneTBB_BINARY_DIR}" CACHE PATH "Path to oneTBB build directory for find_package(TBB)" FORCE)
  endif()
  list(FIND CMAKE_PREFIX_PATH "${oneTBB_BINARY_DIR}" _tbb_prefix_index)
  if(_tbb_prefix_index EQUAL -1)
    list(APPEND CMAKE_PREFIX_PATH "${oneTBB_BINARY_DIR}")
  endif()
endif()
if(DEFINED oneTBB_BINARY_DIR)
  set(_TBB_FAKE_CONFIG "${oneTBB_BINARY_DIR}/TBBConfig.cmake")
  if(NOT EXISTS "${_TBB_FAKE_CONFIG}")
    file(WRITE "${_TBB_FAKE_CONFIG}" "if(NOT TARGET TBB::tbb)\n" "  if(TARGET tbb)\n" "    add_library(TBB::tbb ALIAS tbb)\n" "  else()\n" "    message(FATAL_ERROR 'Expected tbb target not found when loading TBBConfig.cmake')\n" "  endif()\n" "endif()\n" "set(TBB_FOUND TRUE)\n" "set(TBB_VERSION ${TBB_VERSION})\n")
  endif()
endif()
